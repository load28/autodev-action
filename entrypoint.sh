#!/bin/bash
set -e

echo "ü§ñ AutoDev Action (Claude Code)"
echo "================================"
echo "üìù Prompt: ${INPUT_PROMPT:0:100}..."
echo "üåø Base branch: $INPUT_BASE_BRANCH"
echo "ü§ñ Agent: $INPUT_AGENT"
echo ""

# Validate required environment variables
if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "‚ùå Error: ANTHROPIC_API_KEY not set"
    echo "Please set ANTHROPIC_API_KEY in GitHub Secrets"
    exit 1
fi

if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ùå Error: GITHUB_TOKEN not set"
    exit 1
fi

# Git configuration
git config --global user.name "AutoDev Bot"
git config --global user.email "autodev@github.com"

# Fix: Add safe.directory for GitHub Actions workspace
# This is required for Git 2.35.2+ when running in Docker containers
# to prevent "fatal: detected dubious ownership" error
git config --global --add safe.directory /github/workspace

# Set Claude API key for Claude Code CLI
export ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY}"

# Generate branch name with timestamp
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 8)
BRANCH_NAME="autodev/${TIMESTAMP}-${RANDOM_SUFFIX}"

echo "üåø Creating branch: $BRANCH_NAME"

# Fetch and checkout base branch
git fetch origin "$INPUT_BASE_BRANCH" --depth=1
git checkout -b "$BRANCH_NAME" "origin/$INPUT_BASE_BRANCH"

echo ""
echo "ü§ñ Running Claude Code..."
echo "================================"

# Run Claude Code in non-interactive mode
# Permissions are bypassed via ~/.claude/settings.json (configured in Dockerfile)
# --max-turns: limit maximum turns to prevent infinite loops
claude "$INPUT_PROMPT" --max-turns 10 2>&1 || {
    EXIT_CODE=$?
    echo ""
    echo "‚ö†Ô∏è Claude Code exited with code $EXIT_CODE"

    # Check if there are any changes despite the error
    if git diff --quiet HEAD; then
        echo "‚ùå No changes were made"
        exit $EXIT_CODE
    fi

    echo "‚ö†Ô∏è Continuing with available changes..."
}

echo "================================"
echo "‚úÖ Claude Code execution complete"
echo ""

# Auto-commit changes made by Claude Code
# (Claude Code CLI doesn't have --auto-commit option, so we do it manually)
echo "üìù Staging changes..."
git add .

# Check if there are changes to commit
if git diff --cached --quiet; then
    echo "‚ö†Ô∏è No changes to commit"
    echo "Claude Code may not have made any modifications"
    exit 0
fi

# Commit the changes
echo "üíæ Committing changes..."
git commit -m "feat: $INPUT_TASK_TITLE

$INPUT_PROMPT

ü§ñ Generated by AutoDev with Claude Code" || {
    echo "‚ö†Ô∏è Commit failed, but continuing..."
}

# Push the branch
echo "‚¨ÜÔ∏è Pushing branch to origin..."
git push -u origin "$BRANCH_NAME"
echo "‚úÖ Branch pushed successfully"

# Create pull request
echo ""
echo "üîÄ Creating pull request..."

# Prepare PR body
PR_BODY="## AutoDev Task

**Prompt:** $INPUT_PROMPT

**Branch:** \`$BRANCH_NAME\`
**Agent:** $INPUT_AGENT

---

This PR was automatically created by AutoDev using Claude Code.

### How it was generated

\`\`\`bash
claude \"$INPUT_PROMPT\" --max-turns 10
\`\`\`

### Review checklist

- [ ] Review all code changes
- [ ] Check for security issues
- [ ] Verify tests pass
- [ ] Confirm functionality works as expected

---

*ü§ñ Generated by [AutoDev](https://github.com/load28/auto-dev) with Claude Code*"

# Create PR using gh CLI
PR_URL=$(gh pr create \
    --title "$INPUT_TASK_TITLE" \
    --body "$PR_BODY" \
    --base "$INPUT_BASE_BRANCH" \
    --head "$BRANCH_NAME" \
    --label "autodev,automated" \
    2>&1)

PR_CREATE_EXIT=$?

if [ $PR_CREATE_EXIT -eq 0 ]; then
    echo "‚úÖ Pull request created: $PR_URL"

    # Extract PR number from URL
    PR_NUMBER=$(echo "$PR_URL" | grep -oP '(?<=/pull/)\d+' || echo "")

    # Set outputs
    echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
    echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
    echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
else
    # PR creation might fail if PR already exists or other issues
    echo "‚ö†Ô∏è PR creation message: $PR_URL"

    # Still set branch name output
    echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    # Don't fail the action if PR already exists
    if echo "$PR_URL" | grep -q "already exists"; then
        echo "‚ö†Ô∏è A pull request for this branch already exists"
        exit 0
    fi
fi

echo ""
echo "üéâ AutoDev Action Complete!"
echo ""
echo "Summary:"
echo "  Branch: $BRANCH_NAME"
echo "  PR: ${PR_URL:-'Not created'}"
